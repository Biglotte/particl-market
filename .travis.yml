sudo: required
language: node_js
node_js:
  - "node"
services:
  - docker
cache:
  yarn: true
  directories:
    - "node_modules"
env:
  - DOCKER_COMPOSE_VERSION=1.18.0
  # REGISTRY_EMAIL
  - secure: "BMO+s4F8q6aIqBroIrKl5N0EyzbuzBFndPZsJgjajn/bTx/M8pXIIRs1Hyu8VnE2gkYU1z9a/KT+5x498nMzTOuGy4vXn6aG7idJGdbg69ySAfSZguvnDnyTcpl4RSFdWhnEwM0Qjw1QJYYSOi4QpCwBM0qyNBlhGAc4OVnVYtWaO6JO/L38bPgrF73UvHs4BFInGizoTpWBwD6ZqBFHXPt/TN2N7X135K9hBCWpbDZCUGJ0mEWxR5bOHKrKZi71c0Fm6C9uMzU9VIoAj8rUaZM1OEgm5YQCJ05N5BF2p8p0lnRGXHf9B89Pw+M21OOnJQfHHOTl63ZDVVzP+fktmr7XcNRgymHCVAQQOzyarkiUKsMgUONILlHfRIvu7/UT6u86OYYSgOtJTekEDAj/Va4tsiFo0Xcti71OPnUl1BBnPZG+BOeil/lVcK6OhfNgkwTQLt/kFHnxHVlGRDfqxO/IqEroQscfgmxPx+PHTfCqj2RfvFHWp5hPcmEI1IgoHNmBoSXVPxTZ2CJNaQAhIV+ihIpk5nthyqXSE3ND60k/nk7huf8j1/DAAJ39gXDZnt2RVcjIKH/26NJA3tpTyRqTHLYnzcPzQ3z5vEghFFykOEb9eqSrJ7VlBT8pqo8KmpjJdgGnFcjpO68JojujSE7UklpVmB2+4vR6dOXYmts="
  # REGISTRY_USER
  - secure: "muNNPU2LWQwL5NpZ/LJZpaiKJKIes4cbR2W4cJuaRpeN3VmSdX4AvRLrDM4byQsbraM/sRb2oIr9PN2gGIqTiJLke5qSg7xbnS/0JsnNC2fAY9Q1Hig4Pq9TK1g6hhocgpYG3tz3vZAFt7qnYvleMMguDXB9osF5BzEbYD3gxzLdInpODozxSgi1o5Imj+djWdV1PRiNeNTq1+ADUvQn5iu7+XxeNbYDEgDvEAUjTXJqres0wMuKGzqXhZUsoAh0seUgwHh89QEmKfwDquzXeSW/yE8bOwlbZTZJT9HJ0jevkwtJg4TVxruGgNWQWoC4dsCwR9H8nKNk/MQnFYJn6B2aSpE0F8Ga3Zy7i5ZZMI+ghNPDA5HEp4XVaqpG3x737Pvx04hDN35D0+Pwd+bplnbAJolQTSbTn5XEK8D2ucL/bSJUgqLw6/VLwy9aZcnSfgjMtpDmN6eB57Sukm6m1QHIpK+dPcNMWhHM5aq33M+ngIv/nn8T1USLtW7v7EmUsu0BZxuB6CyV8dAHYYIKkvMMtFravw2KXK5yM4/wlZmxFlH8g7uCp/J6MyZAktsfd8R/y+DHfKmqw395NGQJMOmf6/2WOpvwBADl/tWKZdp1jOlp45sIA9Tqm7bo8USicktk7rgy825YLTjcJLuVenUgaNVURfGiee4Kb12LAFA="
  # REGISTRY_PASS
  - secure: "Ay3J7ijIVApun3ulhbOJ6z5/TQ2w926+GYphK4DgCTO8S2Fop8fGc8WcWO2TXdkF2UyJ4SwLocvCAbSj/koGRazXni3FME+lX/Oa4uvN5wiy9vYGqZK/72ENrQOfOgGAeMzzwXZTehwh9DdttOq6cK/a0orKQ0wGImvVtcacFHIQz4lnHz+Yoh6ciuFuH+HihRk7GjBkAsBXnNbOiEJwAoAw4hDn9zgXP/LudruPtj3ELmqDshqqL0UB6j89OyIye4bakOHziFXnU2SFM2sGGfEJ0wT26xgfSTysYR22j95u/KBddOPMHV2BuGDagEsjtI2LR1zGwEKM3DyrHIIKSS9pjdCfoXgyJTnNXdInaVD5THSXk1/+95kSoWKFUguh0Ktxvg8N4NxixVnQbjhDEsiXg5AL7+ABPELQTPt9xjIjLQvULA72AYPeFtfx7HFQCyMQphwL5NpB3Ve/myw9/rZUtpsDjrAcZa3hPB1ZODy+a7F8BmjxRJW4aNYsJVYcxP8n2KEGRuWMSN6jWF3wQzCEtP6QAn6weR+/8onS5699vacWBxovqdZ96fnGetLj00UfCpzSI2gaDFqWwkgGbcOwS2Fjif7tI6knxn9dQP1uO/+6b4hpTBA4kB0XGW4R3KdSX6pJ1Zl+9jYULe8hAOHseDm7VlST2Q3wh1xrjZE="
  - COMMIT=${TRAVIS_COMMIT::8}
  - REGISTRY=r.cfcr.io
  - IMAGE=ludx/dapp-shell-ci
  - IMAGE_NAME=$REGISTRY/$IMAGE
  - IMAGE_TAG=$TRAVIS_BRANCH-$TRAVIS_COMMIT

# TRAVIS_BRANCH:
#  for push builds, or builds not triggered by a pull request, this is the name of the branch.
#  for builds triggered by a pull request this is the name of the branch targeted by the pull request.
#  for builds triggered by a tag, this is the same as the name of the tag (TRAVIS_TAG)
# TRAVIS_COMMIT:
#  The commit that the current build is testing.
# TRAVIS_EVENT_TYPE:
#  Indicates how the build was triggered. One of push, pull_request, api, cron
# TRAVIS_PULL_REQUEST_BRANCH:
#  if the current job is a pull request, the name of the branch from which the PR originated.
#  if the current job is a push build, this variable is empty (
# TRAVIS_TEST_RESULT:
#  is set to 0 if the build is successful and 1 if the build is broken.
# TRAVIS_TAG:
#  If the current build is for a git tag, this variable is set to the tagâ€™s name.


before_install:
  # update docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt-get update
  - sudo apt-get -y install docker-ce
  # update docker-compose
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker-compose --version
  # login to registry
  - docker login r.cfcr.io -u $REGISTRY_USER -p $REGISTRY_PASS
  # install other misc stuff
  - npm install -g wait-port
  - npm install -g -s --no-progress yarn
  #- docker pull $IMAGE_NAME:develop || true


install:
  # install deps and set up the app
  - yarn install
  - bin/ci-create-dbs.sh
  - bin/ci-create-build-version.sh
  # build and run the stack
  - docker-compose up --build -d
  - docker ps

#  - docker build --pull --cache-from "$IMAGE_NAME" -t $IMAGE_NAME:$IMAGE_TAG -f Dockerfile.ci .
#  - docker push $DOCKER_IMAGE:$TRAVIS_COMMIT
#  - docker run -d $DOCKER_IMAGE:$TRAVIS_COMMIT
#  - docker build -t ludx/dapp-shell-ci -f Dockerfile.ci .
#  - docker build --pull --cache-from "$IMAGE_NAME" -t r.cfcr.io/ludx/dapp-shell-ci:latest -t r.cfcr.io/ludx/dapp-shell-ci:develop -t r.cfcr.io/ludx/dapp-shell-ci:master -f Dockerfile.ci .

#before_script:
#  - docker pull myorg/myimage || true

script:
  - npm test
  - npm run test:integration:pretty
  - bin/ci-blackbox-tests.sh
  - docker-compose down

#after_success:
#  - if [ "$TRAVIS_BRANCH" == "master" ]; then
#      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD";
#      docker push USER/REPO;
#    fi
#  - if [ $TRAVIS_BRANCH == "master" && $TRAVIS_PULL_REQUEST == "false" ]; then
#      ./.travis/success_message.sh;
#    fi
#  - if [ "$TRAVIS_BRANCH" == "develop" ]; then
#      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD";
#      docker push USER/REPO;
#    fi
#  - if [ "$TRAVIS_BRANCH" == "master" ]; then
#      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD";
#      docker push USER/REPO;
#    fi
#after_failure:

#before_deploy:
#  - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"
#  - docker tag "$IMAGE_NAME" "${IMAGE_NAME}:latest"
#  - docker tag "$IMAGE_NAME" "${IMAGE_NAME}:${version}"
#  - git_sha="$(git rev-parse --short HEAD)"
#  - docker tag "$IMAGE_NAME" "${IMAGE_NAME}:develop"
#  - docker tag "$IMAGE_NAME" "${IMAGE_NAME}:${git_sha}-develop"

#deploy:
#  provider: script
#  script: docker push "${IMAGE_NAME}:latest" && docker push "${IMAGE_NAME}:${version}"
#  script: docker push "${IMAGE_NAME}:develop" && docker push "${IMAGE_NAME}:${git_sha}-develop"
#  on:
#    branch: master

#after_deploy:

after_script:
  - docker images

#notifications:
#  email:
#    recipients:
#      - $EMAIL
#    on_success: never
#    on_failure: always
