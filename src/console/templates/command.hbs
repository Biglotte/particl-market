import * as Bookshelf from 'bookshelf';
import { inject, named } from 'inversify';
import { validate, request } from '../../{{deepness}}core/api/Validate';
import { Logger as LoggerType } from '../../{{deepness}}core/Logger';
import { Types, Core, Targets } from '../../{{deepness}}constants';
import { {{name.capitalize}}Service } from '../{{deepness}}services/{{name.capitalize}}Service';
import { RpcRequest } from '../{{deepness}}requests/RpcRequest';
import { {{name.capitalize}} } from '../{{deepness}}models/{{name.capitalize}}';
import {RpcCommand} from './RpcCommand';

export class {{name.capitalize}}Command implements RpcCommand<{{name.capitalize}}> {

    public log: LoggerType;
    public name: string;

    constructor(
        @inject(Types.Core) @named(Core.Logger) public Logger: typeof LoggerType
    ) {
        this(log);
        this.name = '{{name.capitalize}}Command';
    }

    @validate()
    public async execute( @request(RpcRequest) data: any): Promise<Bookshelf.Collection<{{name.capitalize}}>> {
        // TODO: Fill me in
        throw new NotFoundException();
        // Maybe try: return this.{{name.camelCase}}Service.findAll();
    }

    public help(): string {
        return '{{name.capitalize}}Command: TODO: Fill in help string.';
    }
}
