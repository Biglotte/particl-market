
# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

defaults: &defaults
  working_directory: ~/dappshell
  docker:
    # primary container, this is where commands are executed for jobs using the Docker executor.
    - image: circleci/node:9.5.0-browsers
    # specify service dependencies here if necessary
    # - image: ludx/particl:latest
    # - image: r.cfcr.io/ludx/codefresh-custom-runner

version: 2
jobs:

  # builds feature branch
  build_feature:
    <<: *defaults

    environment:
      TEST_RESULTS: /app/test-results
      REGISTRY: "r.cfcr.io"
      IMAGE_NAME: "ludx/dapp-shell-ci"
      DISCORD_URL: "https://discordapp.com/api/webhooks/405329233720639488/dWkcjRhtGBfMJjV29158ZavOWMno7FXAPBEVuGDrVnGYI5rcRG_pMDPveaGhyUlGLbRR"
      RPCUSER: "test"
      RPCPASSWORD: "test"
      RPCHOSTNAME: "localhost"
      MAINNET_PORT: 52738
      TESTNET_PORT: 52935

    steps:
      - checkout
#      - run: mkdir -p workspace
#      - run: echo "Hello, world!" > workspace/echo-output
      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
#      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory.  This is a directory on
          # the container which is taken to be the root directory of the workspace.
#          root: workspace
          # Must be relative path from root
#          paths:
#            - echo-output

#      - run: mkdir -p $TEST_RESULTS

      # download and cache dependencies
      - restore_cache:
          keys:
          - dappshell-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - dappshell-dependencies-

      # activate the Remote Docker Environment, which enables you to add docker-compose commands to build images
      # The Remote Docker Environment has the following technical specifications:
      # cpu: 2, processor: Intel(R) Xeon(R) @ 2.3GHz, ram: 8GB, hd: 100GB

      - setup_remote_docker:
          docker_layer_caching: true
          version: 17.11.0-ce
      - run: docker-compose --version
      - run: sudo npm install -g wait-port


      # install deps and set up the app locally
      - run: yarn install
      - run: ./bin/copy-env.sh
      - run: ./bin/ci-create-dbs.sh
      - run: ./bin/ci-create-build-version.sh

      # cache
      - save_cache:
          paths:
            - node_modules
          key: dappshell-dependencies-{{ checksum "package.json" }} # cache will be regenerated every time something is changed in package.json file, different branches of this project will generate the same cache key.
          # key: dappshell-{{ .Branch }}-{{ checksum "package.json" }} # same as the previous one, but each branch will generate separate cache


      # build the application image
      - run: docker login $REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASS
      - run: docker build --pull --cache-from "$IMAGE_NAME" --tag "$REGISTRY/$IMAGE_NAME:feature" -f Dockerfile.ci .
      - run: docker push $REGISTRY/$IMAGE_NAME:feature

  # tests feature branch
  test_feature:
    <<: *defaults

    environment:
      TEST_RESULTS: /app/test-results
      REGISTRY: "r.cfcr.io"
      IMAGE_NAME: "ludx/dapp-shell-ci"
      DISCORD_URL: "https://discordapp.com/api/webhooks/405329233720639488/dWkcjRhtGBfMJjV29158ZavOWMno7FXAPBEVuGDrVnGYI5rcRG_pMDPveaGhyUlGLbRR"
      RPCUSER: "test"
      RPCPASSWORD: "test"
      RPCHOSTNAME: "localhost"
      MAINNET_PORT: 52738
      TESTNET_PORT: 52935

    steps:

      # deploy the image
      #- run: docker push company/app:$CIRCLE_BRANCH

      # build and push Docker image
      #- run: |
      #    TAG=0.1.$CIRCLE_BUILD_NUM
      #    docker build -t   CircleCI-Public/circleci-demo-docker:$TAG .
      #    docker login -u $DOCKER_USER -p $DOCKER_PASS
      #    docker push CircleCI-Public/circleci-demo-docker:$TAG


      # Start
      # The primary container runs in a separate environment from Remote Docker.
      # Therefore, Docker containers cannot directly communicate with the containers
      # running in remote docker.
      # To interact with a running service, use docker and a container running
      # in the serviceâ€™s network.

      # build and run the stack
      # - docker-compose --file docker-compose-ci.yml up --build -d
      # - docker ps
      # - docker-compose ps
      - checkout

      # download and cache dependencies
      - restore_cache:
          keys:
          - dappshell-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - dappshell-dependencies-

      # activate the Remote Docker Environment, which enables you to add docker-compose commands to build images
      # The Remote Docker Environment has the following technical specifications:
      # cpu: 2, processor: Intel(R) Xeon(R) @ 2.3GHz, ram: 8GB, hd: 100GB

      - setup_remote_docker:
          docker_layer_caching: true
          version: 17.11.0-ce
      - run: docker-compose --version

      - run: docker login $REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASS
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose --file docker-compose-circle.yml up --build -d

            # docker-compose will start 2 containers, the one with service will be named `dappshell_app1_1`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
            docker run --network container:dappshell_app1_1 $REGISTRY/$IMAGE_NAME npm test
            docker run --network container:dappshell_app1_1 $REGISTRY/$IMAGE_NAME bin/ci-integration-tests.sh
            docker run --network container:dappshell_app1_1 $REGISTRY/$IMAGE_NAME bin/ci-blackbox-tests.sh development 3100 http://localhost test test feature1.particl.xyz 52738 52935
            docker run --network container:dappshell_app1_1 $REGISTRY/$IMAGE_NAME bin/ci-ui-tests.sh development 3100 http://localhost test test feature1.particl.xyz 52738 52935
            docker-compose down
#              $REGISTRY/$IMAGE_NAME --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test


      # run tests!
#      - run: yarn test


 #     - deploy:
 #         name: Build and push Docker image
 #         command: |
 #           TAG="0.1.${CIRCLE_BUILD_NUM}"
 #           docker build -t circleci/cci-demo-docker:$TAG .
 #           docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
 #           docker push circleci/cci-demo-docker:$TAG

#      - store_artifacts:
#          path: $TEST_RESULTS
#          destination: raw-test-output

#      - store_test_results:
#          path: $TEST_RESULTS


workflows:
  version: 2

  build_test_deploy:
    jobs:
      - build_feature:
          filters:
            branches:
              only: /.*/
              ignore:
                - develop
                - master
#      - build_develop:
#          filters:
#            branches:
#              only: develop
#      - build_master:
#          filters:
#            branches:
#              only: master

      - test_feature:
          requires:
            - build_feature
#          context: feature
#      - test_develop:
#          requires:
#            - build_develop
#          context: develop
#      - test_master:
#          requires:
#            - build_master
#          context: master

#      - deploy_feature:
#          requires:
#            - test_feature
#          context: feature
#      - deploy_develop:
#          requires:
#            - test_develop
#          context: develop
#      - deploy_master:
#          requires:
#            - test_master
#          context: master
