
# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

defaults: &defaults
  working_directory: ~/dappshell

envfeature: &envfeature
  REGISTRY: r.cfcr.io
  IMAGE_NAME: ludx/dapp-shell-ci
  DISCORD_URL: https://discordapp.com/api/webhooks/405329233720639488/dWkcjRhtGBfMJjV29158ZavOWMno7FXAPBEVuGDrVnGYI5rcRG_pMDPveaGhyUlGLbRR
  APP_HOST: http://localhost
  APP_PORT: 3100
  RPCUSER: test
  RPCPASSWORD: test
  RPCHOSTNAME: localhost
  MAINNET_PORT: 52738
  TESTNET_PORT: 52935

version: 2
jobs:

  # builds the feature branch
  build_feature:
    <<: *defaults
    docker:
      - image: circleci/node:9.5.0-browsers
    environment:
      <<: *envfeature
      RPCHOSTNAME: feature1.particl.xyz

    steps:
      - checkout

      # download and cache dependencies
      - restore_cache:
          keys:
          - dappshell-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - dappshell-dependencies-

      - setup_remote_docker:
          docker_layer_caching: true
          version: 17.11.0-ce

      # install deps and set up the app locally
      - run: yarn install
      - run: ./bin/copy-env.sh
      - run: ./bin/ci-create-dbs.sh
      - run: ./bin/ci-create-build-version.sh

      # cache
      - save_cache:
          paths:
            - node_modules
          key: dappshell-dependencies-{{ checksum "package.json" }} # cache will be regenerated every time something is changed in package.json file, different branches of this project will generate the same cache key.
          # key: dappshell-{{ .Branch }}-{{ checksum "package.json" }} # same as the previous one, but each branch will generate separate cache

      # build the app image
      - run: docker login $REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASS
      - run: docker build --pull --cache-from "$IMAGE_NAME" --tag "$REGISTRY/$IMAGE_NAME:feature" -f Dockerfile.ci .
      - run: docker push $REGISTRY/$IMAGE_NAME:feature

      - persist_to_workspace:
          root: ~/dappshell
          paths:
            - .

  # tests the feature branch
  test_feature:
    <<: *defaults

    # machine:
    #  enabled: true
    #  image: circleci/classic:latest

    docker:
      - image: circleci/node:9.5.0-browsers

    environment:
      <<: *envfeature
      RPCHOSTNAME: feature1.particl.xyz

    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 17.11.0-ce

      - attach_workspace:
          at: ~/dappshell
      - restore_cache:
          keys:
          - dappshell-dependencies-{{ checksum "package.json" }}
          - dappshell-dependencies-
      - run:
          name: apt-get updates
          command: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install gcc-4.9 g++-4.9
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.0
      - run: ./dockerize -wait tcp://feature1.particl.xyz:52935 -timeout 30s
      - run: docker login $REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASS
      - run: docker run -d --name app1 --net=host --env-file .env.circle.app1 $REGISTRY/$IMAGE_NAME:feature bin/ci-entrypoint.sh
      - run: docker run -d --name app2 --net=host --env-file .env.circle.app2 $REGISTRY/$IMAGE_NAME:feature bin/ci-entrypoint.sh
      - run: ./dockerize -wait http://localhost:3100/cli -timeout 180s

      # - run: docker logs app1
      # - run: docker ps
      # - run: docker stats --no-stream

      # install deps and set up the app locally
      # - run: npm install -g -s --no-progress yarn
      # - run: yarn install
      # - run: ./bin/copy-env.sh
      # - run: ./bin/ci-create-dbs.sh
      # - run: ./bin/ci-create-build-version.sh

      - run: npm test
      - run: bin/ci-integration-tests.sh development 3100 http://localhost test test feature1.particl.xyz 52738 52935
      - run: bin/ci-blackbox-tests.sh development 3100 http://localhost test test feature1.particl.xyz 52738 52935
      - run: bin/ci-ui-tests.sh development 3100 http://localhost test test feature1.particl.xyz 52738 52935

 #     - deploy:
 #         name: Build and push Docker image
 #         command: |
 #           TAG="0.1.${CIRCLE_BUILD_NUM}"
 #           docker build -t circleci/cci-demo-docker:$TAG .
 #           docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
 #           docker push circleci/cci-demo-docker:$TAG

  # deploy the feature branch
  deploy_feature:
    <<: *defaults

    docker:
      - image: circleci/node:9.5.0-browsers

    environment:
      <<: *envfeature
      RPCHOSTNAME: feature1.particl.xyz

    steps:
      - attach_workspace:
          at: ~/dappshell

      # download and cache dependencies
      - restore_cache:
          keys:
          - dappshell-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - dappshell-dependencies-

      - run:
          name: deploy
          command: echo yay!



workflows:
  version: 2

  build_test_deploy:
    jobs:
      - build_feature:
          filters:
            branches:
              only: /.*/
              ignore:
                - develop
                - master
#      - build_develop:
#          filters:
#            branches:
#              only: develop
#      - build_master:
#          filters:
#            branches:
#              only: master

      # TEST FEATURE BRANCH
      - test_feature:
          requires:
            - build_feature
#      - integration_test_feature:
#          requires:
#            - build_feature
#      - blackbox_test_feature:
#          requires:
#            - build_feature
#      - ui_test_feature:
#          requires:
#            - build_feature

#      - test_develop:
#          requires:
#            - build_develop
#          context: develop
#      - test_master:
#          requires:
#            - build_master
#          context: master

      - deploy_feature:
          requires:
            - test_feature
            # - integration_test_feature
            # - blackbox_test_feature
            # - ui_test_feature

#      - deploy_develop:
#          requires:
#            - test_develop
#          context: develop
#      - deploy_master:
#          requires:
#            - test_master
#          context: master
